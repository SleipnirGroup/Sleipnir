name: Build

on: [pull_request, push]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build-native:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact-name: Windows - native
            cmake-config-env-vars:
            os: windows-2022
          - artifact-name: Linux - native
            cmake-config-env-vars:
            os: ubuntu-22.04
          - artifact-name: macOS - native
            cmake-config-env-vars: CFLAGS="$CFLAGS -arch x86_64 -arch arm64" CXXFLAGS="$CXXFLAGS -arch x86_64 -arch arm64"
            os: macOS-12

    name: "${{ matrix.artifact-name }}"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: ${{ matrix.cmake-config-env-vars }} cmake -B build -S . -DBUILD_PYTHON=OFF

      - name: Build
        run: cmake --build build --config RelWithDebInfo --parallel $(nproc)

      - name: Test
        working-directory: build
        run: ctest -C RelWithDebInfo --output-on-failure

      - name: Install
        run: cmake --install build --config RelWithDebInfo --prefix pkg

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: pkg

  build-python:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact-name: Windows - python
            cmake-config-env-vars:
            os: windows-2022
          - artifact-name: Linux - python
            cmake-config-env-vars:
            os: ubuntu-22.04
          - artifact-name: macOS - python
            cmake-config-env-vars: CFLAGS="$CFLAGS -arch x86_64 -arch arm64" CXXFLAGS="$CXXFLAGS -arch x86_64 -arch arm64"
            os: macOS-12

    name: "${{ matrix.artifact-name }}"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install build and tox Python packages
        run: pip3 install --user build tox

      - name: Build
        run: ${{ matrix.cmake-config-env-vars }} python3 -m build

      - name: Test
        run: |
          pip3 install --user dist/sleipnirgroup_jormungandr-*.whl
          python3 -m tox
        shell: bash

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: dist

  build-cross:
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact-name: roboRIO
            container: wpilib/roborio-cross-ubuntu:2023-22.04
            toolchain: /usr/local/toolchain-config.cmake

    name: "${{ matrix.artifact-name }}"
    runs-on: ubuntu-22.04
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: cmake -B build -S . --toolchain ${{ matrix.toolchain }} -DBUILD_PYTHON=OFF

      - name: Build
        run: cmake --build build --config RelWithDebInfo --parallel $(nproc)

      - name: Install
        run: cmake --install build --config RelWithDebInfo --prefix pkg

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: pkg

  build-wasm:
    name: "Wasm"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup emscripten
        uses: numworks/setup-emscripten@latest

      - name: Configure
        run: emcmake cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_BENCHMARKING=OFF -DBUILD_TESTING=OFF -DBUILD_PYTHON=OFF

      - name: Build
        run: cmake --build build --config Release --parallel $(nproc)

      - name: Install
        run: cmake --install build --config Release --prefix pkg

      - uses: actions/upload-artifact@v3
        with:
          name: Wasm
          path: pkg
